# channel_tracker.py
# Module (Cog) ƒë·ªÉ theo d√µi ho·∫°t ƒë·ªông c·ªßa k√™nh, s·ª≠ d·ª•ng JSONBin.io ƒë·ªÉ l∆∞u tr·ªØ.
# Phi√™n b·∫£n 5: Lo·∫°i b·ªè ho√†n to√†n s·ª± ph·ª• thu·ªôc v√†o PostgreSQL.

import discord
from discord.ext import commands, tasks
import requests # S·ª≠ d·ª•ng requests ƒë·ªÉ t∆∞∆°ng t√°c v·ªõi JSONBin
import os
from datetime import datetime, timedelta, timezone
import json

# --- C√°c h√†m t∆∞∆°ng t√°c v·ªõi JSONBin.io (Synchronous) ---
JSONBIN_API_KEY = os.getenv('JSONBIN_API_KEY')
JSONBIN_BIN_ID = os.getenv('JSONBIN_BIN_ID')
JSONBIN_HEADERS = {
    "Content-Type": "application/json",
    "X-Master-Key": JSONBIN_API_KEY,
    "X-Access-Key": JSONBIN_API_KEY
}
JSONBIN_URL = f"https://api.jsonbin.io/v3/b/{JSONBIN_BIN_ID}"

def storage_read_data():
    """ƒê·ªçc to√†n b·ªô d·ªØ li·ªáu t·ª´ JSONBin."""
    if not all([JSONBIN_API_KEY, JSONBIN_BIN_ID]):
        print("[Tracker] L·ªói: Thi·∫øu th√¥ng tin c·∫•u h√¨nh JSONBin.")
        return {}
    try:
        response = requests.get(f"{JSONBIN_URL}/latest", headers=JSONBIN_HEADERS)
        if response.status_code == 200:
            return response.json().get('record', {})
        print(f"[Tracker] L·ªói khi ƒë·ªçc JSONBin: {response.status_code} - {response.text}")
        return {}
    except Exception as e:
        print(f"[Tracker] L·ªói ngo·∫°i l·ªá khi ƒë·ªçc JSONBin: {e}")
        return {}

def storage_write_data(data):
    """Ghi to√†n b·ªô d·ªØ li·ªáu v√†o JSONBin."""
    if not all([JSONBIN_API_KEY, JSONBIN_BIN_ID]):
        return False
    try:
        response = requests.put(JSONBIN_URL, json=data, headers=JSONBIN_HEADERS)
        if response.status_code == 200:
            return True
        print(f"[Tracker] L·ªói khi ghi JSONBin: {response.status_code} - {response.text}")
        return False
    except Exception as e:
        print(f"[Tracker] L·ªói ngo·∫°i l·ªá khi ghi JSONBin: {e}")
        return False

# --- C√°c h√†m qu·∫£n l√Ω d·ªØ li·ªáu theo d√µi (tr√™n n·ªÅn JSONBin) ---
# C√°c h√†m n√†y s·∫Ω thao t√°c v·ªõi key 'tracked_channels' trong bin c·ªßa b·∫°n

def get_tracked_channels_data():
    """L·∫•y ri√™ng ph·∫ßn d·ªØ li·ªáu c·ªßa c√°c k√™nh ƒëang theo d√µi."""
    full_data = storage_read_data()
    return full_data.get('tracked_channels', {})

def add_tracked_channel(channel_id, guild_id, user_id, notification_channel_id):
    """Th√™m ho·∫∑c c·∫≠p nh·∫≠t m·ªôt k√™nh v√†o danh s√°ch theo d√µi."""
    full_data = storage_read_data()
    if 'tracked_channels' not in full_data:
        full_data['tracked_channels'] = {}
    
    full_data['tracked_channels'][str(channel_id)] = {
        'guild_id': guild_id,
        'user_id': user_id,
        'notification_channel_id': notification_channel_id,
        'is_inactive': False # Lu√¥n reset v·ªÅ False khi th√™m m·ªõi ho·∫∑c c·∫≠p nh·∫≠t
    }
    storage_write_data(full_data)

def remove_tracked_channel(channel_id):
    """X√≥a m·ªôt k√™nh kh·ªèi danh s√°ch theo d√µi."""
    full_data = storage_read_data()
    if 'tracked_channels' in full_data and str(channel_id) in full_data['tracked_channels']:
        del full_data['tracked_channels'][str(channel_id)]
        storage_write_data(full_data)

def get_all_tracked_for_check():
    """L·∫•y danh s√°ch k√™nh ƒë·ªÉ ki·ªÉm tra, ƒë·ªãnh d·∫°ng gi·ªëng phi√™n b·∫£n DB c≈©."""
    tracked_data = get_tracked_channels_data()
    # Chuy·ªÉn ƒë·ªïi dict th√†nh list of tuples ƒë·ªÉ t∆∞∆°ng th√≠ch v·ªõi logic c≈©
    # (channel_id, guild_id, user_id, notification_channel_id, is_inactive)
    return [
        (int(cid), data['guild_id'], data['user_id'], data['notification_channel_id'], data['is_inactive'])
        for cid, data in tracked_data.items()
    ]

def update_tracked_channel_status(channel_id, is_now_inactive: bool):
    """C·∫≠p nh·∫≠t tr·∫°ng th√°i cho m·ªôt k√™nh."""
    full_data = storage_read_data()
    if 'tracked_channels' in full_data and str(channel_id) in full_data['tracked_channels']:
        full_data['tracked_channels'][str(channel_id)]['is_inactive'] = is_now_inactive
        storage_write_data(full_data)

# --- C√°c th√†nh ph·∫ßn UI (Views, Modals) - Kh√¥ng thay ƒë·ªïi ---

class TrackByIDModal(discord.ui.Modal, title="Theo d√µi b·∫±ng ID K√™nh"):
    channel_id_input = discord.ui.TextInput(
        label="ID c·ªßa k√™nh c·∫ßn theo d√µi",
        placeholder="D√°n ID c·ªßa k√™nh vƒÉn b·∫£n v√†o ƒë√¢y...",
        required=True, min_length=17, max_length=20
    )

    async def on_submit(self, interaction: discord.Interaction):
        bot = interaction.client
        try:
            channel_id = int(self.channel_id_input.value)
        except ValueError:
            return await interaction.response.send_message("ID k√™nh kh√¥ng h·ª£p l·ªá. Vui l√≤ng ch·ªâ nh·∫≠p s·ªë.", ephemeral=True)

        channel_to_track = bot.get_channel(channel_id)
        if not isinstance(channel_to_track, discord.TextChannel):
            return await interaction.response.send_message("Kh√¥ng t√¨m th·∫•y k√™nh vƒÉn b·∫£n v·ªõi ID n√†y ho·∫∑c bot kh√¥ng c√≥ quy·ªÅn truy c·∫≠p.", ephemeral=True)
        
        # Thay th·∫ø l·ªánh g·ªçi DB b·∫±ng l·ªánh g·ªçi h√†m m·ªõi
        await bot.loop.run_in_executor(
            None, add_tracked_channel, channel_to_track.id, channel_to_track.guild.id, interaction.user.id, interaction.channel_id
        )

        embed = discord.Embed(
            title="üõ∞Ô∏è B·∫Øt ƒë·∫ßu theo d√µi",
            description=f"Th√†nh c√¥ng! Bot s·∫Ω theo d√µi k√™nh {channel_to_track.mention} trong server **{channel_to_track.guild.name}**.",
            color=discord.Color.green()
        )
        embed.set_footer(text="C·∫£nh b√°o s·∫Ω ƒë∆∞·ª£c g·ª≠i v·ªÅ k√™nh n√†y n·∫øu k√™nh kh√¥ng ho·∫°t ƒë·ªông.")
        await interaction.response.send_message(embed=embed, ephemeral=True)

class TrackByNameModal(discord.ui.Modal, title="Theo d√µi k√™nh tr√™n m·ªçi Server"):
    channel_name_input = discord.ui.TextInput(
        label="Nh·∫≠p ch√≠nh x√°c t√™n k√™nh c·∫ßn theo d√µi",
        placeholder="V√≠ d·ª•: general, announcements, v.v.",
        required=True
    )

    async def on_submit(self, interaction: discord.Interaction):
        await interaction.response.defer(ephemeral=True, thinking=True)
        bot = interaction.client
        channel_name = self.channel_name_input.value.strip().lower().replace('-', ' ')

        found_channels = [
            target_channel
            for guild in bot.guilds
            if guild.get_member(interaction.user.id)
            and (target_channel := discord.utils.get(guild.text_channels, name=channel_name))
        ]

        if not found_channels:
            return await interaction.followup.send(f"Kh√¥ng t√¨m th·∫•y k√™nh n√†o t√™n `{self.channel_name_input.value}` trong c√°c server b·∫°n c√≥ m·∫∑t.", ephemeral=True)

        for channel in found_channels:
            # Thay th·∫ø l·ªánh g·ªçi DB b·∫±ng l·ªánh g·ªçi h√†m m·ªõi
            await bot.loop.run_in_executor(
                None, add_tracked_channel, channel.id, channel.guild.id, interaction.user.id, interaction.channel_id
            )

        server_list_str = "\n".join([f"‚Ä¢ **{c.guild.name}**" for c in found_channels])
        embed = discord.Embed(
            title="üõ∞Ô∏è B·∫Øt ƒë·∫ßu theo d√µi h√†ng lo·∫°t",
            description=f"ƒê√£ b·∫Øt ƒë·∫ßu theo d√µi **{len(found_channels)}** k√™nh t√™n `{self.channel_name_input.value}` t·∫°i:\n{server_list_str}",
            color=discord.Color.green()
        )
        embed.set_footer(text="C·∫£nh b√°o s·∫Ω ƒë∆∞·ª£c g·ª≠i v·ªÅ k√™nh n√†y n·∫øu c√≥ k√™nh kh√¥ng ho·∫°t ƒë·ªông.")
        await interaction.followup.send(embed=embed, ephemeral=True)

class TrackInitialView(discord.ui.View):
    def __init__(self, author_id: int):
        super().__init__(timeout=180)
        self.author_id = author_id

    async def interaction_check(self, interaction: discord.Interaction) -> bool:
        if interaction.user.id != self.author_id:
            await interaction.response.send_message("B·∫°n kh√¥ng ph·∫£i ng∆∞·ªùi d√πng l·ªánh n√†y!", ephemeral=True)
            return False
        return True

    @discord.ui.button(label="Theo d√µi b·∫±ng ID K√™nh", style=discord.ButtonStyle.primary, emoji="üÜî")
    async def track_by_id(self, interaction: discord.Interaction, button: discord.ui.Button):
        await interaction.response.send_modal(TrackByIDModal())

    @discord.ui.button(label="Theo d√µi b·∫±ng T√™n K√™nh", style=discord.ButtonStyle.secondary, emoji="üìù")
    async def track_by_name(self, interaction: discord.Interaction, button: discord.ui.Button):
        await interaction.response.send_modal(TrackByNameModal())


# --- Cog ch√≠nh ---
class ChannelTracker(commands.Cog):
    def __init__(self, bot: commands.Bot):
        self.bot = bot
        self.inactivity_threshold_minutes = int(os.getenv('INACTIVITY_THRESHOLD_MINUTES', 7 * 24 * 60))
        if not all([JSONBIN_API_KEY, JSONBIN_BIN_ID]):
            print("[Tracker] V√î HI·ªÜU H√ìA: Kh√¥ng t√¨m th·∫•y JSONBIN_API_KEY ho·∫∑c JSONBIN_BIN_ID.")
        else:
            self.check_activity.start()

    def cog_unload(self):
        self.check_activity.cancel()

    @tasks.loop(minutes=30)
    async def check_activity(self):
        print(f"[{datetime.now()}] [Tracker] B·∫Øt ƒë·∫ßu ki·ªÉm tra tr·∫°ng th√°i k√™nh b·∫±ng JSONBin...")
        
        # Thay th·∫ø l·ªánh g·ªçi DB
        tracked_channels_data = await self.bot.loop.run_in_executor(None, get_all_tracked_for_check)
        
        for channel_id, guild_id, user_id, notification_channel_id, was_inactive in tracked_channels_data:
            notification_channel = self.bot.get_channel(notification_channel_id)
            if not notification_channel:
                print(f"[Tracker] L·ªñI: Kh√¥ng t√¨m th·∫•y k√™nh th√¥ng b√°o {notification_channel_id}, x√≥a k√™nh {channel_id} kh·ªèi theo d√µi.")
                await self.bot.loop.run_in_executor(None, remove_tracked_channel, channel_id)
                continue

            channel_to_track = self.bot.get_channel(channel_id)
            if not channel_to_track:
                print(f"[Tracker] K√™nh {channel_id} kh√¥ng t·ªìn t·∫°i, ƒëang x√≥a kh·ªèi theo d√µi.")
                await self.bot.loop.run_in_executor(None, remove_tracked_channel, channel_id)
                continue
            
            try:
                last_message = await channel_to_track.fetch_message(channel_to_track.last_message_id) if channel_to_track.last_message_id else None
                last_activity_time = last_message.created_at if last_message else channel_to_track.created_at
                time_since_activity = datetime.now(timezone.utc) - last_activity_time
                
                is_currently_inactive = time_since_activity > timedelta(minutes=self.inactivity_threshold_minutes)
                user_to_notify = self.bot.get_user(user_id) or await self.bot.fetch_user(user_id)
                mention = user_to_notify.mention if user_to_notify else f"<@{user_id}>"

                # K·ªäCH B·∫¢N 1: K√™nh v·ª´a m·ªõi tr·ªü n√™n kh√¥ng ho·∫°t ƒë·ªông
                if is_currently_inactive and not was_inactive:
                    print(f"[Tracker] K√™nh {channel_id} ƒë√£ kh√¥ng ho·∫°t ƒë·ªông. G·ª≠i c·∫£nh b√°o.")
                    await self.bot.loop.run_in_executor(None, update_tracked_channel_status, channel_id, True)
                    
                    embed = discord.Embed(
                        title="‚ö†Ô∏è C·∫£nh b√°o K√™nh kh√¥ng ho·∫°t ƒë·ªông",
                        description=f"K√™nh {channel_to_track.mention} t·∫°i **{channel_to_track.guild.name}** ƒë√£ kh√¥ng c√≥ tin nh·∫Øn m·ªõi trong h∆°n **{self.inactivity_threshold_minutes // (24*60)}** ng√†y.",
                        color=discord.Color.orange()
                    )
                    embed.add_field(name="L·∫ßn ho·∫°t ƒë·ªông cu·ªëi", value=f"<t:{int(last_activity_time.timestamp())}:R>", inline=False)
                    embed.set_footer(text=f"Thi·∫øt l·∫≠p b·ªüi {user_to_notify.display_name if user_to_notify else f'User ID: {user_id}'}")
                    await notification_channel.send(content=f"Th√¥ng b√°o cho {mention}:", embed=embed)

                # K·ªäCH B·∫¢N 2: K√™nh ƒë√£ ho·∫°t ƒë·ªông tr·ªü l·∫°i
                elif not is_currently_inactive and was_inactive:
                    print(f"[Tracker] K√™nh {channel_id} ƒë√£ ho·∫°t ƒë·ªông tr·ªü l·∫°i. G·ª≠i th√¥ng b√°o.")
                    await self.bot.loop.run_in_executor(None, update_tracked_channel_status, channel_id, False)

                    embed = discord.Embed(
                        title="‚úÖ K√™nh ƒë√£ ho·∫°t ƒë·ªông tr·ªü l·∫°i",
                        description=f"K√™nh {channel_to_track.mention} t·∫°i **{channel_to_track.guild.name}** ƒë√£ c√≥ ho·∫°t ƒë·ªông m·ªõi.",
                        color=discord.Color.green()
                    )
                    embed.add_field(name="Ho·∫°t ƒë·ªông g·∫ßn nh·∫•t", value=f"<t:{int(last_activity_time.timestamp())}:R>", inline=False)
                    embed.set_footer(text="Bot s·∫Ω ti·∫øp t·ª•c theo d√µi k√™nh n√†y.")
                    await notification_channel.send(content=f"C·∫≠p nh·∫≠t cho {mention}:", embed=embed)
            
            except discord.Forbidden:
                print(f"[Tracker] L·ªói quy·ªÅn: Kh√¥ng th·ªÉ ƒë·ªçc l·ªãch s·ª≠ k√™nh {channel_to_track.name} ({channel_id}). B·ªè qua.")
            except Exception as e:
                print(f"[Tracker] L·ªói kh√¥ng x√°c ƒë·ªãnh khi ki·ªÉm tra k√™nh {channel_id}: {e}")

    @check_activity.before_loop
    async def before_check_activity(self):
        await self.bot.wait_until_ready()

    @commands.command(name='track', help='Theo d√µi ho·∫°t ƒë·ªông c·ªßa m·ªôt k√™nh.')
    @commands.is_owner()
    async def track(self, ctx: commands.Context):
        embed = discord.Embed(
            title="üõ∞Ô∏è Thi·∫øt l·∫≠p Theo d√µi K√™nh",
            description="Ch·ªçn ph∆∞∆°ng th·ª©c b·∫°n mu·ªën d√πng ƒë·ªÉ x√°c ƒë·ªãnh k√™nh c·∫ßn theo d√µi. D·ªØ li·ªáu s·∫Ω ƒë∆∞·ª£c l∆∞u tr√™n JSONBin.",
            color=discord.Color.blue()
        )
        view = TrackInitialView(author_id=ctx.author.id)
        await ctx.send(embed=embed, view=view)

    @commands.command(name='untrack', help='Ng·ª´ng theo d√µi ho·∫°t ƒë·ªông c·ªßa m·ªôt k√™nh.')
    @commands.is_owner()
    async def untrack(self, ctx: commands.Context, channel: discord.TextChannel):
        tracked_channels_data = await self.bot.loop.run_in_executor(None, get_tracked_channels_data)
        
        if str(channel.id) not in tracked_channels_data:
            return await ctx.send(f"K√™nh {channel.mention} hi·ªán kh√¥ng ƒë∆∞·ª£c theo d√µi.", ephemeral=True)
            
        await self.bot.loop.run_in_executor(None, remove_tracked_channel, channel.id)
        
        embed = discord.Embed(
            title="‚úÖ D·ª´ng theo d√µi", description=f"ƒê√£ ng·ª´ng theo d√µi k√™nh {channel.mention}.", color=discord.Color.red()
        )
        await ctx.send(embed=embed)

async def setup(bot: commands.Bot):
    await bot.add_cog(ChannelTracker(bot))
